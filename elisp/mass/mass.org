#+title: Mass

* Notes
* Dependencies
** TODO Dash
[[https://github.com/magnars/dash.el][Dash]] is a list API for emacs.
** TODO Dash-Functional
** f
[[https://github.com/rejeep/f.el][f]] is a package for working with files and directories. Note that this might obviate the need for =dash=.

** s
[[https://github.com/magnars/s.el][s]] is a string manipulation library for emacs.

** TODO Mustache
[[https://github.com/mustache/emacs][Mustache]] is a major mode that adds support for templates using ={{...}}= syntax.

** TODO ht
[[https://github.com/Wilfred/ht.el][ht]] is a library that makes working with hash tables easier.

* Source
** mass.el
*** Header
#+begin_src emacs-lisp :tangle "./mass.el"
;;; mass.el --- Mass blog content management

;; Copyright (c) 2021 Jonathan Crum

;; Author: Jonathan Crum <crumja4@gmail.com>
;; Version: 0.0.1
;; Package-Requires: ((emacs "27.1") (f "0.20.0") (s "1.12.0") (mustache "0.24") (ht "2.2"))

;; URL: https://github.com/krummja/mass

;;; Commentary:

;; Org mass management
;; This file is not a part of GNU Emacs.

;;; License: 

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;;; Code:

(require 'f)
(require 'helm)
(require 'ht)
(require 'mustache)
(require 'org)
(require 'ox-html)
(require 'ox-publish)
(require 's)
#+end_src

*** Definitions
#+begin_src emacs-lisp :tangle "./mass.el"
(defgroup mass nil
  "Mass wiki"
  :group 'org)

(defcustom mass-projects nil
  "List of managed mass projects"
  :group 'mass)

(defcustom mass-pre-publish-hook nil
  "Hook for pre-publish. Functions take no arguments and run in the 
to-be-published buffer."
  :type 'hook
  :group 'mass)

(defcustom pile-post-publish-hook nil
  "Hook for post-publish. Functions take the following arguments:
1. Input file path
2. Output file path
These functions are directly appended to the org-publish-after-publishing-hook."
  :type 'hook
  :group 'mass)
#+end_src

*** Methods
Interesting - note the use of =cl-defmethod= instead of =defun= here.

Per the GNU Emacs documentation ([[https://www.gnu.org/software/emacs/manual/html_node/eieio/Methods.html][6.2]]), a method only executes if the =obj= argument passed into it an object of [[https://www.gnu.org/software/emacs/manual/html_mono/eieio.html#Building-Classes][EIEIO]] class =classname=.

#+begin_src emacs-lisp :tangle "./mass.el"
(cl-defmethod mass-project-publish ((pj mass-project) &optional arg)
  "Publish the project."
  (save-excursion
    (with-mass-hooks (org-publish-project (format "mass-%s" (oref pj :name)) arg))))
#+end_src

*** Functions

**** publish current file
#+begin_src emacs-lisp :tangle "./mass.el"
(defun mass-publish-current-file (arg)
  "Publish only the current file."
  (interactive "P")  ;; arg code letter 'prefix arg converted to number, does not I/O'
  (save-excursion
    (with-mass-hooks (org-publish-current-file arg))))
#+end_src

**** publish

**** export setup

**** setup

*** Provide
#+begin_src emacs-lisp
(provide 'mass)

;;; mass.el ends here
#+end_src

